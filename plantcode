#!/usr/bin/env node

var util = require("util");
var fs = require("fs");
var hbs = require("handlebars");
var parser = require("./src/plantuml");

var options = {
  language: "coffeescript",
  output: null
};

var supported_languages = ["coffeescript", "csharp", "ecmascript5", "ecmascript6", "java", "php", "ruby", "typescript", "python"];

var args = process.argv.slice(2); // Trim "node" and the script path.

if (args.length === 0) {
  printUsage();
} else {
  processArguments();
}

function printLanguages() {
  supported_languages.forEach(function (item) {
    util.puts(item);
  })
  exitSuccess();
}

function printUsage() {
  util.puts("Usage: plantcode [options] <inputFile>");
  util.puts("");
  util.puts("Generates classfile(s) for the provided PlantUML file specified by <input_file> and writes to standard output.");
  util.puts("");
  util.puts("Options:");
  util.puts("  -l, --language <language>          name of the programming language");
  util.puts("                                     which the produced class files")
  util.puts("                                     will be written in");
  util.puts("  -o, --out <output_path>            the path to output the file(s) to");
  util.puts("      --show-languages               displays all the current supported");
  util.puts("                                     programming languages for use")
  util.puts("                                     for with the language option");
  util.puts("  -h, --help                         print help and exit");
  exitSuccess();
}

function isValidLanguage(language) {
  return supported_languages.indexOf(language) !== -1;
}

function processArguments() {

  while (args.length > 0 && isOption(args[0])) {
    switch (args[0]) {
      case "-o":
      case "--out":
        nextArg();
        if (args.length === 0) {
          abort("Missing output directory or file for -o/--out option.");
        }
        options.output = args[0];
        break;
      case "-l":
      case "--language":
        nextArg();
        if (args.length === 0) {
          abort("Missing language of the -l/--language option.");
        } else if (!isValidLanguage(args[0])) {
          abort("Invalid language provided.");
        }
        options.language = args[0];
        break;
      case "--show-languages":
        printLanguages();
        break;
      case "-h":
      case "--help":
        printUsage();
        break;
      default:
        abort("Invalid option " + args[0]);
        break;
    }
    nextArg();
  }

  switch (args.length) {
    case 1:
      fs.readFile(args[0], { encoding: "UTF-8" }, function (err, data) {
        if (err === null) {
          processInputFile(data);
        } else {
          util.puts("Unable to read input file.");
        }
      });
    break;
    default:
      abort("No input file provided.");
  }

}

function exitFailure() {
  process.exit(1);
}

function exitSuccess() {
  process.exit(0);
}

function abort(message) {
  for (var i = 0, length = arguments.length; i < length; i++) {
    util.error(arguments[i]);
  }
  exitFailure();
}

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

function processInputFile(data) {
  try {
    var aUMLBlocks = parser.parse(data);
  } catch(e) {
    abort("Error parsing input file: ", e);
  }
  fs.readFile("templates/" + options.language + ".hbs", { encoding: "UTF-8" }, function (err, data) {
    if (err === null) {
      processTemplateFile(data, aUMLBlocks);
    } else {
      abort("Unable to read template file for " + options.language + ".");
    }
  });
}

function processTemplateFile(templateData, dictionary) {

  var template = hbs.compile(templateData);

  var output = "";

  dictionary.forEach(function (element) {
    element.getClasses().forEach(function (element) {
      output += template(element) + "\r\n";
    })
  })

  if (options.output === null) {
    util.puts(output);
  } else {
    fs.writeFile(options.output, output, function (err) {
      if (err !== null) {
        abort("Unable to write output file for " + options.output + ".");
      }
    })
  }

}

// Workaround for an apparent bug in Handlebars: functions are not called with the parent scope
// as context.
//
// Here the getFullName is found in the parent scope (Class), but it is called with the current
// scope (Field) as context:
//
// {{#each getFields}}
//   {{../getFullName}}
// {{/each}}
//
// The following helper works around it:
//
// {{#each getFields}}
//   {{#call ../this ../getFullName}}
// {{/each}}

hbs.registerHelper('call', function (context, member, options) {
   return member.call(context);
});
